import React, { useCallback, useEffect, useRef } from 'react';
import { useSelector } from 'react-redux';
//useSelector - –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø–æ—Ö–æ–∂ –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª—å –µ—â–µ)
//useDispatch - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥ (actions)
import qs from 'qs';
import { useNavigate } from 'react-router-dom';

import { Categories, Sort, PizzaBlock, Skeleton, Pagination } from '../components';

import { sortList } from '../components/Sort';
import { useAppDispatch } from '../redux/store';
import { selectFilter } from '../redux/filter/selectors';
import { selectPizzaData } from '../redux/pizza/selectors';
import { setActivCategory, setCurrentPage, setFilter } from '../redux/filter/slice';
import { fetchPizzas } from '../redux/pizza/asyncActions';
import { IFilterSliceState } from '../redux/filter/types';

const Home: React.FC = () => {
  /*Redux Toolkit */
  //Get state and dispatch
  const { categoryId: activCategory, sort, currentPage, searchValue } = useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzaData);
  const dispatch = useAppDispatch();
  /*Redux Toolkit */

  const navigate = useNavigate();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  //–°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const onClickCategory = useCallback((idx: number) => {
    dispatch(setActivCategory(idx));
  }, []);

  //–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ü–∞–≥–∏–Ω–∞—Ü–∏—è)
  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  const getPizzas = async () => {
    // setIsLoading(true); //–í–∫–ª—é—á–µ–Ω–∏—è —Å–∫–µ–ª–µ—Ç–æ–Ω–∞

    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = activCategory > 0 ? `&category=${activCategory}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';

    //Get –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ü—Ü –æ—Ç –±—ç–∫–µ–Ω–¥–∞
    dispatch(
      // @ts-ignore
      fetchPizzas({ sortBy, order, category, search, currentPage: String(currentPage) }),
    );
  };

  //–ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  //–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId: activCategory,
        currentPage,
        searchValue: searchValue,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [activCategory, sort, currentPage, searchValue]);

  //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  //–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω–æ–π –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1)) as unknown as IFilterSliceState;
      console.log(params);
      // @ts-ignore
      const sort = sortList.find((obj) => obj.sortProperty === params.sortProperty);

      dispatch(
        setFilter({
          categoryId: Number(params.categoryId), //–¢–∏–ø–∏–∑–∏—Ä—É–µ–º –∫
          searchValue: params.searchValue,
          currentPage: Number(params.currentPage),
          sort: sort || sortList[0],
        }),
      );
      isSearch.current = true;
    }
  }, []);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  //Get json –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–∏—Ü—Ü)
  useEffect(() => {
    window.scrollTo(0, 0); //—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–ª–∞–≤–Ω—É—é

    if (isSearch.current === false) {
      getPizzas();
    }

    isSearch.current = false;
  }, [activCategory, sort, searchValue, currentPage]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∏—Ü—Ü –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
  // .filter((obj) => obj.title.toLowerCase().includes(searchValue.toLowerCase()))
  const pizzas = items.map((obj: any) => <PizzaBlock {...obj} key={obj.id} />);
  const pagination = <Pagination currentPage={currentPage} onChangePage={onChangePage} />;

  return (
    <div className="container">
      <div className="content__top">
        <Categories activCategory={activCategory} onClickCategory={onClickCategory} />
        <Sort sort={sort} />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      <div>
        {status === 'error' ? (
          <div className="content__error-info">
            <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
            <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</p>
          </div>
        ) : status === 'not_found' ? (
          <>
            <div className="content__error-info">
              <h2>–ü–∏—Ü—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï</h2>
              <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</p>
            </div>
            {pagination}
          </>
        ) : status === 'loading' ? (
          <div className="content__items">
            {[...new Array(6)].map((_, index) => (
              <Skeleton key={index} />
            ))}
          </div>
        ) : (
          <>
            <div className="content__items">{pizzas}</div>
            {pagination}
          </>
        )}
      </div>
    </div>
  );
};

export default Home;
